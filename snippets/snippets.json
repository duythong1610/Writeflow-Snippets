{
  "Ant Design Form": {
    "prefix": "antform",
    "body": [
      "import React from 'react';",
      "import { Form, Input, Button, message } from 'antd';",
      "",
      "interface ${1:FormData} {",
      "  $2",
      "}",
      "",
      "const ${3:FormComponent}: React.FC = () => {",
      "  const [form] = Form.useForm<${1:FormData}>();",
      "",
      "  const onFinish = (values: ${1:FormData}) => {",
      "    console.log('Form values:', values);",
      "    message.success('Form submitted successfully!');",
      "  };",
      "",
      "  const onFinishFailed = (errorInfo: any) => {",
      "    console.log('Failed:', errorInfo);",
      "    message.error('Please check your input!');",
      "  };",
      "",
      "  return (",
      "    <Form",
      "      form={form}",
      "      layout=\"vertical\"",
      "      onFinish={onFinish}",
      "      onFinishFailed={onFinishFailed}",
      "    >",
      "      $4",
      "      <Form.Item>",
      "        <Button type=\"primary\" htmlType=\"submit\">",
      "          Submit",
      "        </Button>",
      "      </Form.Item>",
      "    </Form>",
      "  );",
      "};",
      "",
      "export default ${3:FormComponent};"
    ],
    "description": "Ant Design Form with TypeScript"
  },
  "Form Item Input": {
    "prefix": "finput",
    "body": [
      "<Form.Item",
      "  label=\"${1:Label}\"",
      "  name=\"${2:fieldName}\"",
      "  rules={[{ required: ${3:true}, message: '${4:Please input ${1:Label}!}' }]}",
      ">",
      "  <Input placeholder=\"${5:Enter ${1:Label}}\" />",
      "</Form.Item>"
    ],
    "description": "Ant Design Form Item with Input"
  },
  "Form Item Select": {
    "prefix": "fselect",
    "body": [
      "<Form.Item",
      "  label=\"${1:Label}\"",
      "  name=\"${2:fieldName}\"",
      "  rules={[{ required: ${3:true}, message: '${4:Please select ${1:Label}!}' }]}",
      ">",
      "  <Select placeholder=\"${5:Select ${1:Label}}\">",
      "    $6",
      "  </Select>",
      "</Form.Item>"
    ],
    "description": "Ant Design Form Item with Select"
  },
  "Select Option": {
    "prefix": "sopt",
    "body": ["<Select.Option value=\"${1:value}\">${2:Label}</Select.Option>"],
    "description": "Ant Design Select Option"
  },
  "Ant Design Table": {
    "prefix": "anttable",
    "body": [
      "import React from 'react';",
      "import { Table, Space, Button } from 'antd';",
      "import type { ColumnsType } from 'antd/es/table';",
      "",
      "interface ${1:DataType} {",
      "  key: string;",
      "  $2",
      "}",
      "",
      "const ${3:TableComponent}: React.FC = () => {",
      "  const columns: ColumnsType<${1:DataType}> = [",
      "    {",
      "      title: '${4:Column Title}',",
      "      dataIndex: '${5:dataIndex}',",
      "      key: '${5:dataIndex}',",
      "    },",
      "    {",
      "      title: 'Action',",
      "      key: 'action',",
      "      render: (_, record) => (",
      "        <Space size=\"middle\">",
      "          <Button type=\"link\" onClick={() => handleEdit(record)}>Edit</Button>",
      "          <Button type=\"link\" danger onClick={() => handleDelete(record)}>Delete</Button>",
      "        </Space>",
      "      ),",
      "    },",
      "  ];",
      "",
      "  const data: ${1:DataType}[] = [",
      "    $6",
      "  ];",
      "",
      "  const handleEdit = (record: ${1:DataType}) => {",
      "    console.log('Edit:', record);",
      "  };",
      "",
      "  const handleDelete = (record: ${1:DataType}) => {",
      "    console.log('Delete:', record);",
      "  };",
      "",
      "  return <Table columns={columns} dataSource={data} />;",
      "};",
      "",
      "export default ${3:TableComponent};"
    ],
    "description": "Ant Design Table with TypeScript"
  },
  "Table Column": {
    "prefix": "tcol",
    "body": [
      "{",
      "  title: '${1:Column Title}',",
      "  dataIndex: '${2:dataIndex}',",
      "  key: '${2:dataIndex}',",
      "  ${3:// sorter: true,}",
      "  ${4:// filters: [],}",
      "},"
    ],
    "description": "Ant Design Table Column"
  },
  "CRUD List Component": {
    "prefix": "crudlist",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { Table, Button, Space, Modal, Form, Input, message, Popconfirm } from 'antd';",
      "import { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';",
      "import type { ColumnsType } from 'antd/es/table';",
      "",
      "interface ${1:DataType} {",
      "  id: string;",
      "  $2",
      "}",
      "",
      "const ${3:CrudComponent}: React.FC = () => {",
      "  const [data, setData] = useState<${1:DataType}[]>([]);",
      "  const [loading, setLoading] = useState(false);",
      "  const [isModalVisible, setIsModalVisible] = useState(false);",
      "  const [editingRecord, setEditingRecord] = useState<${1:DataType} | null>(null);",
      "  const [form] = Form.useForm();",
      "",
      "  // Load data",
      "  const fetchData = async () => {",
      "    setLoading(true);",
      "    try {",
      "      // Replace with your API call",
      "      const response = await fetch('/api/${4:endpoint}');",
      "      const result = await response.json();",
      "      setData(result);",
      "    } catch (error) {",
      "      message.error('Failed to load data');",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  useEffect(() => {",
      "    fetchData();",
      "  }, []);",
      "",
      "  // Create/Update",
      "  const handleSave = async (values: Omit<${1:DataType}, 'id'>) => {",
      "    try {",
      "      if (editingRecord) {",
      "        // Update",
      "        await fetch(`/api/${4:endpoint}/\\${editingRecord.id}`, {",
      "          method: 'PUT',",
      "          headers: { 'Content-Type': 'application/json' },",
      "          body: JSON.stringify(values),",
      "        });",
      "        message.success('Updated successfully');",
      "      } else {",
      "        // Create",
      "        await fetch('/api/${4:endpoint}', {",
      "          method: 'POST',",
      "          headers: { 'Content-Type': 'application/json' },",
      "          body: JSON.stringify(values),",
      "        });",
      "        message.success('Created successfully');",
      "      }",
      "      setIsModalVisible(false);",
      "      setEditingRecord(null);",
      "      form.resetFields();",
      "      fetchData();",
      "    } catch (error) {",
      "      message.error('Operation failed');",
      "    }",
      "  };",
      "",
      "  // Delete",
      "  const handleDelete = async (id: string) => {",
      "    try {",
      "      await fetch(`/api/${4:endpoint}/\\${id}`, {",
      "        method: 'DELETE',",
      "      });",
      "      message.success('Deleted successfully');",
      "      fetchData();",
      "    } catch (error) {",
      "      message.error('Delete failed');",
      "    }",
      "  };",
      "",
      "  // Open modal for create/edit",
      "  const openModal = (record?: ${1:DataType}) => {",
      "    if (record) {",
      "      setEditingRecord(record);",
      "      form.setFieldsValue(record);",
      "    } else {",
      "      setEditingRecord(null);",
      "      form.resetFields();",
      "    }",
      "    setIsModalVisible(true);",
      "  };",
      "",
      "  const columns: ColumnsType<${1:DataType}> = [",
      "    {",
      "      title: '${5:ID}',",
      "      dataIndex: 'id',",
      "      key: 'id',",
      "    },",
      "    $6",
      "    {",
      "      title: 'Actions',",
      "      key: 'actions',",
      "      render: (_, record) => (",
      "        <Space>",
      "          <Button",
      "            type=\"primary\"",
      "            icon={<EditOutlined />}",
      "            size=\"small\"",
      "            onClick={() => openModal(record)}",
      "          >",
      "            Edit",
      "          </Button>",
      "          <Popconfirm",
      "            title=\"Are you sure?\"",
      "            description=\"This action cannot be undone.\"",
      "            onConfirm={() => handleDelete(record.id)}",
      "            okText=\"Yes\"",
      "            cancelText=\"No\"",
      "          >",
      "            <Button",
      "              type=\"primary\"",
      "              danger",
      "              icon={<DeleteOutlined />}",
      "              size=\"small\"",
      "            >",
      "              Delete",
      "            </Button>",
      "          </Popconfirm>",
      "        </Space>",
      "      ),",
      "    },",
      "  ];",
      "",
      "  return (",
      "    <div>",
      "      <div style={{ marginBottom: 16 }}>",
      "        <Button",
      "          type=\"primary\"",
      "          icon={<PlusOutlined />}",
      "          onClick={() => openModal()}",
      "        >",
      "          Add New",
      "        </Button>",
      "      </div>",
      "",
      "      <Table",
      "        columns={columns}",
      "        dataSource={data}",
      "        rowKey=\"id\"",
      "        loading={loading}",
      "        pagination={{ pageSize: 10 }}",
      "      />",
      "",
      "      <Modal",
      "        title={editingRecord ? 'Edit ${7:Item}' : 'Add New ${7:Item}'}",
      "        open={isModalVisible}",
      "        onCancel={() => {",
      "          setIsModalVisible(false);",
      "          setEditingRecord(null);",
      "          form.resetFields();",
      "        }}",
      "        footer={null}",
      "      >",
      "        <Form",
      "          form={form}",
      "          layout=\"vertical\"",
      "          onFinish={handleSave}",
      "        >",
      "          $8",
      "          <Form.Item>",
      "            <Space>",
      "              <Button type=\"primary\" htmlType=\"submit\">",
      "                {editingRecord ? 'Update' : 'Create'}",
      "              </Button>",
      "              <Button",
      "                onClick={() => {",
      "                  setIsModalVisible(false);",
      "                  setEditingRecord(null);",
      "                  form.resetFields();",
      "                }}",
      "              >",
      "                Cancel",
      "              </Button>",
      "            </Space>",
      "          </Form.Item>",
      "        </Form>",
      "      </Modal>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${3:CrudComponent};"
    ],
    "description": "Complete CRUD List Component with Ant Design"
  },
  "CRUD Detail Component": {
    "prefix": "cruddetail",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { Card, Descriptions, Button, Space, Spin, message } from 'antd';",
      "import { EditOutlined, DeleteOutlined, ArrowLeftOutlined } from '@ant-design/icons';",
      "import { useNavigate, useParams } from 'react-router-dom';",
      "",
      "interface ${1:DataType} {",
      "  id: string;",
      "  $2",
      "}",
      "",
      "const ${3:DetailComponent}: React.FC = () => {",
      "  const { id } = useParams<{ id: string }>();",
      "  const navigate = useNavigate();",
      "  const [data, setData] = useState<${1:DataType} | null>(null);",
      "  const [loading, setLoading] = useState(true);",
      "",
      "  useEffect(() => {",
      "    if (id) {",
      "      fetchData(id);",
      "    }",
      "  }, [id]);",
      "",
      "  const fetchData = async (itemId: string) => {",
      "    try {",
      "      const response = await fetch(`/api/${4:endpoint}/\\${itemId}`);",
      "      const result = await response.json();",
      "      setData(result);",
      "    } catch (error) {",
      "      message.error('Failed to load data');",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  const handleDelete = async () => {",
      "    if (!data) return;",
      "    try {",
      "      await fetch(`/api/${4:endpoint}/\\${data.id}`, {",
      "        method: 'DELETE',",
      "      });",
      "      message.success('Deleted successfully');",
      "      navigate('/${5:list-route}');",
      "    } catch (error) {",
      "      message.error('Delete failed');",
      "    }",
      "  };",
      "",
      "  if (loading) {",
      "    return (",
      "      <div style={{ textAlign: 'center', padding: '50px' }}>",
      "        <Spin size=\"large\" />",
      "      </div>",
      "    );",
      "  }",
      "",
      "  if (!data) {",
      "    return (",
      "      <div style={{ textAlign: 'center', padding: '50px' }}>",
      "        <p>Data not found</p>",
      "        <Button onClick={() => navigate('/${5:list-route}')}>",
      "          Back to List",
      "        </Button>",
      "      </div>",
      "    );",
      "  }",
      "",
      "  return (",
      "    <Card",
      "      title={`${6:Item} Detail`}",
      "      extra={",
      "        <Space>",
      "          <Button",
      "            icon={<ArrowLeftOutlined />}",
      "            onClick={() => navigate('/${5:list-route}')}",
      "          >",
      "            Back",
      "          </Button>",
      "          <Button",
      "            type=\"primary\"",
      "            icon={<EditOutlined />}",
      "            onClick={() => navigate(`/${7:edit-route}/\\${data.id}`)}",
      "          >",
      "            Edit",
      "          </Button>",
      "          <Button",
      "            type=\"primary\"",
      "            danger",
      "            icon={<DeleteOutlined />}",
      "            onClick={handleDelete}",
      "          >",
      "            Delete",
      "          </Button>",
      "        </Space>",
      "      }",
      "    >",
      "      <Descriptions bordered column={1}>",
      "        <Descriptions.Item label=\"ID\">{data.id}</Descriptions.Item>",
      "        $8",
      "      </Descriptions>",
      "    </Card>",
      "  );",
      "};",
      "",
      "export default ${3:DetailComponent};"
    ],
    "description": "CRUD Detail View Component with Ant Design"
  },
  "CRUD Form Component": {
    "prefix": "crudform",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { Form, Card, Button, Space, message, Spin } from 'antd';",
      "import { ArrowLeftOutlined, SaveOutlined } from '@ant-design/icons';",
      "import { useNavigate, useParams } from 'react-router-dom';",
      "",
      "interface ${1:FormData} {",
      "  $2",
      "}",
      "",
      "const ${3:FormComponent}: React.FC = () => {",
      "  const { id } = useParams<{ id: string }>();",
      "  const navigate = useNavigate();",
      "  const [form] = Form.useForm<${1:FormData}>();",
      "  const [loading, setLoading] = useState(false);",
      "  const [initialLoading, setInitialLoading] = useState(!!id);",
      "  const isEditing = !!id;",
      "",
      "  useEffect(() => {",
      "    if (id) {",
      "      fetchData(id);",
      "    }",
      "  }, [id]);",
      "",
      "  const fetchData = async (itemId: string) => {",
      "    try {",
      "      const response = await fetch(`/api/${4:endpoint}/\\${itemId}`);",
      "      const result = await response.json();",
      "      form.setFieldsValue(result);",
      "    } catch (error) {",
      "      message.error('Failed to load data');",
      "    } finally {",
      "      setInitialLoading(false);",
      "    }",
      "  };",
      "",
      "  const handleSubmit = async (values: ${1:FormData}) => {",
      "    setLoading(true);",
      "    try {",
      "      if (isEditing) {",
      "        // Update",
      "        await fetch(`/api/${4:endpoint}/\\${id}`, {",
      "          method: 'PUT',",
      "          headers: { 'Content-Type': 'application/json' },",
      "          body: JSON.stringify(values),",
      "        });",
      "        message.success('Updated successfully');",
      "      } else {",
      "        // Create",
      "        await fetch('/api/${4:endpoint}', {",
      "          method: 'POST',",
      "          headers: { 'Content-Type': 'application/json' },",
      "          body: JSON.stringify(values),",
      "        });",
      "        message.success('Created successfully');",
      "      }",
      "      navigate('/${5:list-route}');",
      "    } catch (error) {",
      "      message.error('Operation failed');",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  if (initialLoading) {",
      "    return (",
      "      <div style={{ textAlign: 'center', padding: '50px' }}>",
      "        <Spin size=\"large\" />",
      "      </div>",
      "    );",
      "  }",
      "",
      "  return (",
      "    <Card",
      "      title={isEditing ? 'Edit ${6:Item}' : 'Create New ${6:Item}'}",
      "      extra={",
      "        <Button",
      "          icon={<ArrowLeftOutlined />}",
      "          onClick={() => navigate('/${5:list-route}')}",
      "        >",
      "          Back to List",
      "        </Button>",
      "      }",
      "    >",
      "      <Form",
      "        form={form}",
      "        layout=\"vertical\"",
      "        onFinish={handleSubmit}",
      "        disabled={loading}",
      "      >",
      "        $7",
      "        <Form.Item>",
      "          <Space>",
      "            <Button",
      "              type=\"primary\"",
      "              htmlType=\"submit\"",
      "              loading={loading}",
      "              icon={<SaveOutlined />}",
      "            >",
      "              {isEditing ? 'Update' : 'Create'}",
      "            </Button>",
      "            <Button",
      "              onClick={() => navigate('/${5:list-route}')}",
      "              disabled={loading}",
      "            >",
      "              Cancel",
      "            </Button>",
      "          </Space>",
      "        </Form.Item>",
      "      </Form>",
      "    </Card>",
      "  );",
      "};",
      "",
      "export default ${3:FormComponent};"
    ],
    "description": "CRUD Form Component (Create/Edit) with Ant Design"
  },
  "CRUD Search Component": {
    "prefix": "crudsearch",
    "body": [
      "import React from 'react';",
      "import { Form, Input, Button, Select, DatePicker, Space, Card } from 'antd';",
      "import { SearchOutlined, ClearOutlined } from '@ant-design/icons';",
      "",
      "const { RangePicker } = DatePicker;",
      "",
      "interface ${1:SearchFilters} {",
      "  $2",
      "}",
      "",
      "interface ${3:SearchProps} {",
      "  onSearch: (filters: ${1:SearchFilters}) => void;",
      "  loading?: boolean;",
      "}",
      "",
      "const ${4:SearchComponent}: React.FC<${3:SearchProps}> = ({ onSearch, loading = false }) => {",
      "  const [form] = Form.useForm();",
      "",
      "  const handleSearch = (values: ${1:SearchFilters}) => {",
      "    // Remove empty values",
      "    const filters = Object.entries(values).reduce((acc, [key, value]) => {",
      "      if (value !== undefined && value !== null && value !== '') {",
      "        acc[key as keyof ${1:SearchFilters}] = value;",
      "      }",
      "      return acc;",
      "    }, {} as Partial<${1:SearchFilters}>);",
      "",
      "    onSearch(filters as ${1:SearchFilters});",
      "  };",
      "",
      "  const handleReset = () => {",
      "    form.resetFields();",
      "    onSearch({} as ${1:SearchFilters});",
      "  };",
      "",
      "  return (",
      "    <Card style={{ marginBottom: 16 }}>",
      "      <Form",
      "        form={form}",
      "        layout=\"inline\"",
      "        onFinish={handleSearch}",
      "        style={{ display: 'flex', flexWrap: 'wrap', gap: 8 }}",
      "      >",
      "        $5",
      "        <Form.Item>",
      "          <Space>",
      "            <Button",
      "              type=\"primary\"",
      "              htmlType=\"submit\"",
      "              icon={<SearchOutlined />}",
      "              loading={loading}",
      "            >",
      "              Search",
      "            </Button>",
      "            <Button",
      "              icon={<ClearOutlined />}",
      "              onClick={handleReset}",
      "              disabled={loading}",
      "            >",
      "              Clear",
      "            </Button>",
      "          </Space>",
      "        </Form.Item>",
      "      </Form>",
      "    </Card>",
      "  );",
      "};",
      "",
      "export default ${4:SearchComponent};"
    ],
    "description": "CRUD Search/Filter Component with Ant Design"
  }
}
