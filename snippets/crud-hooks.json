{
  "React Full CRUD Hook with Axios Service": {
    "prefix": "crud-hooks",
    "body": [
      "import { useState, useEffect } from 'react';",
      "import { ${1/(.*)/${1:/camelcase}/}Service, ${1:Entity}, Fetch${1/(.*)/${1:/capitalize}/}Params } from '../services/${2:entities}.service';",
      "",
      "export const use${1/(.*)/${1:/capitalize}/}CRUD = (initialParams?: Fetch${1/(.*)/${1:/capitalize}/}Params) => {",
      "  const [data, setData] = useState<${1:Entity}[]>([]);",
      "  const [loading, setLoading] = useState<boolean>(false);",
      "  const [error, setError] = useState<string | null>(null);",
      "  const [params, setParams] = useState<Fetch${1/(.*)/${1:/capitalize}/}Params | undefined>(initialParams);",
      "",
      "  const fetchData = async (queryParams?: Fetch${1/(.*)/${1:/capitalize}/}Params) => {",
      "    setLoading(true);",
      "    setError(null);",
      "    try {",
      "      const res = await ${1/(.*)/${1:/camelcase}/}Service.getList(queryParams || params);",
      "      setData(res.data);",
      "    } catch (err: any) {",
      "      setError(err.message || 'Something went wrong');",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  const create = async (payload: Partial<${1:Entity}>) => {",
      "    setLoading(true);",
      "    try {",
      "      await ${1/(.*)/${1:/camelcase}/}Service.create(payload);",
      "      await fetchData();",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  const update = async (id: number, payload: Partial<${1:Entity}>) => {",
      "    setLoading(true);",
      "    try {",
      "      await ${1/(.*)/${1:/camelcase}/}Service.update(id, payload);",
      "      await fetchData();",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  const remove = async (id: number) => {",
      "    setLoading(true);",
      "    try {",
      "      await ${1/(.*)/${1:/camelcase}/}Service.remove(id);",
      "      await fetchData();",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  useEffect(() => {",
      "    fetchData();",
      "  }, [JSON.stringify(params)]);",
      "",
      "  return {",
      "    data,",
      "    loading,",
      "    error,",
      "    params,",
      "    setParams,",
      "    refetch: fetchData,",
      "    create,",
      "    update,",
      "    remove",
      "  };",
      "};"
    ],
    "description": "Full CRUD React hook using Axios service with loading, error, data, refetch, create, update, remove."
  }
}
