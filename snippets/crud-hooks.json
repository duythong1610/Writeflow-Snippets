{
  "React Full CRUD Hook (Minimal Loading/Error)": {
    "prefix": "crudhooks",
    "body": [
      "import { useState, useEffect } from \"react\";",
      "import {",
      "  ${1/(.*)/${1:/capitalize}/}Service,",
      "  ${1:Entity},",
      "  Fetch${1/(.*)/${1:/capitalize}/}Params,",
      "} from \"../services/${2:entities}.service\";",
      "",
      "export const use${1/(.*)/${1:/capitalize}/}CRUD = (initialParams?: Fetch${1/(.*)/${1:/capitalize}/}Params) => {",
      "  const [data, setData] = useState<${1:Entity}[]>([]);",
      "  const [loading, setLoading] = useState(false);",
      "  const [error, setError] = useState<string | null>(null);",
      "  const [params, setParams] = useState<Fetch${1/(.*)/${1:/capitalize}/}Params | undefined>(",
      "    initialParams",
      "  );",
      "",
      "  const [actionLoading, setActionLoading] = useState({",
      "    create: false,",
      "    update: false,",
      "    delete: false,",
      "  });",
      "  const [actionError, setActionError] = useState({",
      "    create: \"\",",
      "    update: \"\",",
      "    delete: \"\",",
      "  });",
      "",
      "  const fetchData = async (queryParams?: Fetch${1/(.*)/${1:/capitalize}/}Params) => {",
      "    setLoading(true);",
      "    setError(null);",
      "    try {",
      "      const res = await ${1/(.*)/${1:/capitalize}/}Service.getList(queryParams || params);",
      "      setData(res.data);",
      "    } catch (err: any) {",
      "      setError(err.message || \"Fetch failed\");",
      "    } finally {",
      "      setLoading(false);",
      "    }",
      "  };",
      "",
      "  const handleAction = async (",
      "    type: \"create\" | \"update\" | \"delete\",",
      "    fn: () => Promise<any>",
      "  ) => {",
      "    setActionLoading((prev) => ({ ...prev, [type]: true }));",
      "    setActionError((prev) => ({ ...prev, [type]: \"\" }));",
      "    try {",
      "      await fn();",
      "      await fetchData();",
      "    } catch (err: any) {",
      "      setActionError((prev) => ({",
      "        ...prev,",
      "        [type]: err.message || \"Action failed\",",
      "      }));",
      "    } finally {",
      "      setActionLoading((prev) => ({ ...prev, [type]: false }));",
      "    }",
      "  };",
      "",
      "  const create = (payload: Partial<${1:Entity}>) =>",
      "    handleAction(\"create\", () => ${1/(.*)/${1:/capitalize}/}Service.create(payload));",
      "  const update = (id: number, payload: Partial<${1:Entity}>) =>",
      "    handleAction(\"update\", () => ${1/(.*)/${1:/capitalize}/}Service.update(id, payload));",
      "  const remove = (id: number) =>",
      "    handleAction(\"delete\", () => ${1/(.*)/${1:/capitalize}/}Service.remove(id));",
      "",
      "  useEffect(() => {",
      "    fetchData();",
      "  }, [JSON.stringify(params)]);",
      "",
      "  return {",
      "    data,",
      "    loading,",
      "    error,",
      "    params,",
      "    setParams,",
      "    refetch: fetchData,",
      "    create,",
      "    update,",
      "    remove,",
      "    loadingAction: actionLoading,",
      "    errorAction: actionError,",
      "  };",
      "};"
    ],
    "description": "Minimal CRUD hook with clean formatted code (loading/error per action)."
  }
}
