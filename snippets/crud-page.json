{
  "CRUD Page with Hook + CrudModal + Filters": {
    "prefix": "crudpage",
    "body": [
      "import { useState } from 'react';",
      "import { Card, Button, Space, Row, Col, Tag, Form, Input, Select, DatePicker } from 'antd';",
      "import { PlusOutlined, DownloadOutlined, SearchOutlined } from '@ant-design/icons';",
      "import type { ColumnsType } from 'antd/es/table';",
      "import { use${1/(.*)/${1:/capitalize}/}CRUD } from '../hooks/use${1/(.*)/${1:/capitalize}/}CRUD';",
      "import CrudTable from '../components/CrudTable';",
      "import CrudModal from '../components/CrudModal';",
      "",
      "interface ${1:Entity} {",
      "  id: number;",
      "  name: string;",
      "  status: 'active' | 'inactive';",
      "  createdAt: string;",
      "  age?: number;",
      "  isActive?: boolean;",
      "  accept?: boolean;",
      "  gender?: string;",
      "  description?: string;",
      "  date?: string;",
      "  file?: any;",
      "}",
      "",
      "const { Option } = Select;",
      "",
      "const ${2:CrudPage}: React.FC = () => {",
      "  const [modalOpen, setModalOpen] = useState(false);",
      "  const [editingItem, setEditingItem] = useState<${1:Entity} | null>(null);",
      "  const [filters, setFilters] = useState<{ keyword?: string; status?: string; date?: string }>({});",
      "",
      "  const { data, loading, create, update, remove, refetch } = use${1/(.*)/${1:/capitalize}/}CRUD(filters);",
      "",
      "  const handleCreate = () => {",
      "    setEditingItem(null);",
      "    setModalOpen(true);",
      "  };",
      "",
      "  const handleEdit = (record: ${1:Entity}) => {",
      "    setEditingItem(record);",
      "    setModalOpen(true);",
      "  };",
      "",
      "  const handleDelete = async (record: ${1:Entity}) => {",
      "    await remove(record.id);",
      "  };",
      "",
      "  const handleSubmit = async (values: Omit<${1:Entity}, 'id'>) => {",
      "    if (editingItem) {",
      "      await update(editingItem.id, values);",
      "    } else {",
      "      await create(values);",
      "    }",
      "    setModalOpen(false);",
      "    await refetch();",
      "  };",
      "",
      "  const handleFilter = (values: any) => {",
      "    setFilters(values);",
      "    refetch();",
      "  };",
      "",
      "  const columns: ColumnsType<${1:Entity}> = [",
      "    { title: 'ID', dataIndex: 'id', key: 'id', width: 80 },",
      "    { title: 'Name', dataIndex: 'name', key: 'name' },",
      "    {",
      "      title: 'Status',",
      "      dataIndex: 'status',",
      "      key: 'status',",
      "      render: (status: string) => (",
      "        <Tag color={status === 'active' ? 'green' : 'red'}>",
      "          {status === 'active' ? 'Active' : 'Inactive'}",
      "        </Tag>",
      "      ),",
      "    },",
      "    {",
      "      title: 'Created At',",
      "      dataIndex: 'createdAt',",
      "      key: 'createdAt',",
      "      render: (date: string) => new Date(date).toLocaleDateString('en-US'),",
      "    },",
      "  ];",
      "",
      "  return (",
      "    <div>",
      "      {/* Action Bar + Filters */}",
      "      <Card style={{ marginBottom: 16 }}>",
      "        <Form layout=\"inline\" onFinish={handleFilter} initialValues={filters}>",
      "          <Form.Item name=\"keyword\">",
      "            <Input placeholder=\"Search by name\" prefix={<SearchOutlined />} allowClear />",
      "          </Form.Item>",
      "          <Form.Item name=\"status\">",
      "            <Select placeholder=\"Select Status\" allowClear style={{ width: 150 }}>",
      "              <Option value=\"active\">Active</Option>",
      "              <Option value=\"inactive\">Inactive</Option>",
      "            </Select>",
      "          </Form.Item>",
      "          <Form.Item name=\"date\">",
      "            <DatePicker placeholder=\"Created Date\" />",
      "          </Form.Item>",
      "          <Form.Item>",
      "            <Button type=\"primary\" htmlType=\"submit\">Filter</Button>",
      "          </Form.Item>",
      "          <Form.Item>",
      "            <Space>",
      "              <Button type=\"primary\" icon={<PlusOutlined />} onClick={handleCreate}>Add New</Button>",
      "              <Button icon={<DownloadOutlined />}>Export Excel</Button>",
      "            </Space>",
      "          </Form.Item>",
      "        </Form>",
      "      </Card>",
      "",
      "      {/* Data Table */}",
      "      <Card>",
      "        <CrudTable",
      "          data={data}",
      "          loading={loading}",
      "          onEdit={handleEdit}",
      "          onDelete={handleDelete}",
      "          extraColumns={columns}",
      "        />",
      "      </Card>",
      "",
      "      {/* Modal Form */}",
      "      <CrudModal<Omit<${1:Entity}, 'id'>>",
      "        open={modalOpen}",
      "        mode={editingItem ? 'edit' : 'create'}",
      "        initialValues={editingItem || undefined}",
      "        onCancel={() => setModalOpen(false)}",
      "        onSubmit={handleSubmit}",
      "        title={`${editingItem ? 'Edit' : 'Add New'} ${1:Entity}`}",
      "        loading={loading}",
      "      />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${2:CrudPage};"
    ],
    "description": "CRUD page with hook + CrudModal + search filter (status, date, keyword)"
  }
}
