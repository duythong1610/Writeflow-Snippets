{
  "RESTful Service with Axios (baseURL)": {
    "prefix": "axios-service",
    "body": [
      "import api from '../lib/api';",
      "",
      "export interface ${1:Entity} {",
      "  id: number;",
      "  name: string;",
      "  // add more fields if needed",
      "}",
      "",
      "export type Fetch${1/(.*)/${1:/capitalize}/}Params = {",
      "  page?: number;",
      "  pageSize?: number;",
      "  search?: string;",
      "};",
      "",
      "export type PaginatedResponse<T> = {",
      "  data: T[];",
      "  total: number;",
      "  page: number;",
      "  pageSize: number;",
      "};",
      "",
      "const PATH = '/${2:entities}';",
      "",
      "export const ${1/(.*)/${1:/camelcase}/}Service = {",
      "  async getList(params?: Fetch${1/(.*)/${1:/capitalize}/}Params): Promise<PaginatedResponse<${1:Entity}>> {",
      "    const res = await api.get<PaginatedResponse<${1:Entity}>>(PATH, { params });",
      "    return res.data;",
      "  },",
      "",
      "  async getById(id: number): Promise<${1:Entity}> {",
      "    const res = await api.get<${1:Entity}>(`\\${PATH}/\\${id}`);",
      "    return res.data;",
      "  },",
      "",
      "  async create(payload: Partial<${1:Entity}>): Promise<${1:Entity}> {",
      "    const res = await api.post<${1:Entity}>(PATH, payload);",
      "    return res.data;",
      "  },",
      "",
      "  async update(id: number, payload: Partial<${1:Entity}>): Promise<${1:Entity}> {",
      "    const res = await api.put<${1:Entity}>(`\\${PATH}/\\${id}`, payload);",
      "    return res.data;",
      "  },",
      "",
      "  async remove(id: number): Promise<void> {",
      "    await api.delete(`\\${PATH}/\\${id}`);",
      "  },",
      "};"
    ],
    "description": "Generate RESTful CRUD service with Axios (using baseURL in api.ts)"
  }
}
